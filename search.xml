<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="/2023/09/01/ce-shi/"/>
      <url>/2023/09/01/ce-shi/</url>
      
        <content type="html"><![CDATA[<p>测试测试</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>定时任务</title>
      <link href="/2023/08/31/ding-shi-ren-wu/"/>
      <url>/2023/08/31/ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务:"></a>定时任务:</h1><ol><li><strong>线程等待</strong>:<br>   通过创建thread，然后在while循环中通过sleep来设置休眠时间来定时。</li></ol><pre><code class="java">final long timeInterval = 1000;    Runnable runnable = new Runnable() &#123;        @Override        public void run() &#123;            while (true) &#123;                System.out.println(&quot;Hello !!&quot;);                try &#123;                    Thread.sleep(timeInterval);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;;    Thread thread = new Thread(runnable);    thread.start();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. **Timer**</span><br><span class="line">  通过jdk自带的Timer来实现，他通过后台线程计划来执行指定任务。  </span><br><span class="line">````java</span><br><span class="line">// 在指定延迟时间后执行指定的任务</span><br><span class="line">schedule(TimerTask task,long delay);</span><br><span class="line"></span><br><span class="line">// 在指定时间执行指定的任务。（只执行一次）</span><br><span class="line">schedule(TimerTask task, Date time);</span><br><span class="line"></span><br><span class="line">// 延迟指定时间（delay）之后，开始以指定的间隔（period）重复执行指定的任务</span><br><span class="line">schedule(TimerTask task,long delay,long period);</span><br><span class="line"></span><br><span class="line">// 在指定的时间开始按照指定的间隔（period）重复执行指定的任务</span><br><span class="line">schedule(TimerTask task, Date firstTime , long period);</span><br><span class="line"></span><br><span class="line">// 在指定的时间开始进行重复的固定速率执行任务</span><br><span class="line">scheduleAtFixedRate(TimerTask task,Date firstTime,long period);</span><br><span class="line"></span><br><span class="line">// 在指定的延迟后开始进行重复的固定速率执行任务</span><br><span class="line">scheduleAtFixedRate(TimerTask task,long delay,long period);</span><br><span class="line"></span><br><span class="line">// 终止此计时器，丢弃所有当前已安排的任务。</span><br><span class="line">cancal()；</span><br><span class="line"></span><br><span class="line">// 从此计时器的任务队列中移除所有已取消的任务。</span><br><span class="line">purge()；</span><br></pre></td></tr></table></figure>3. **Quartz**使用Quartz可以开发一个或者多个定时任务，每个定时任务可以单独指定执行的时间，例如每隔1小时执行一次、每个月第一天上午10点执行一次、每个月最后一天下午5点执行一次等。Quartz通常有三部分组成：调度器、任务、触发器.定义执行任务Job，构建触发器Trigger，使用调度器绑定触发器和任务；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、创建调度器Scheduler</span></span><br><span class="line">        <span class="type">SchedulerFactory</span> <span class="variable">schedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">// 2、创建JobDetail实例，并与PrintJob类绑定(Job执行内容)</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(PrintJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;group&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 3、构建Trigger实例，每隔1s执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;trigger&quot;</span>, <span class="string">&quot;triggerGroup&quot;</span>)</span><br><span class="line">                .startNow()<span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">1</span>)<span class="comment">//每隔1s执行一次</span></span><br><span class="line">                        .repeatForever()).build();<span class="comment">//一直执行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、Scheduler绑定Job和Trigger，并执行</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------scheduler start ! ------------&quot;</span>);</span><br><span class="line">        scheduler.start();</span><br></pre></td></tr></table></figure>Spring Taskspring自带的一套定时任务工具，支持注解和配置文件两种形式。需要在启动类上加一个@EnableScheduling来开启定时任务。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Scheduled(cron = &quot;0 0 3 * * ?&quot;)</span><br><span class="line">public void job1() &#123;</span><br><span class="line">    System.out.println(&quot;通过cron定义的定时任务&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Scheduled(fixedDelay = 1000L)</span><br><span class="line">public void job2() &#123;</span><br><span class="line">    System.out.println(&quot;通过fixedDelay定义的定时任务&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>定时任务</title>
      <link href="/2023/08/30/ding-shi-ren-wu/"/>
      <url>/2023/08/30/ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><ol><li><strong>线程等待</strong><br>通过创建thread，然后在while循环中通过sleep来设置休眠时间来定时。<br>实例 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">timeInterval</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello !!&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(timeInterval);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">    thread.start();</span><br></pre></td></tr></table></figure></li><li><strong>Timer</strong><br>通过jdk自带的Timer来实现，他通过后台线程计划来执行指定任务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在指定延迟时间后执行指定的任务</span></span><br><span class="line">schedule(TimerTask task,<span class="type">long</span> delay);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定时间执行指定的任务。（只执行一次）</span></span><br><span class="line">schedule(TimerTask task, Date time);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟指定时间（delay）之后，开始以指定的间隔（period）重复执行指定的任务</span></span><br><span class="line">schedule(TimerTask task,<span class="type">long</span> delay,<span class="type">long</span> period);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定的时间开始按照指定的间隔（period）重复执行指定的任务</span></span><br><span class="line">schedule(TimerTask task, Date firstTime , <span class="type">long</span> period);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定的时间开始进行重复的固定速率执行任务</span></span><br><span class="line">scheduleAtFixedRate(TimerTask task,Date firstTime,<span class="type">long</span> period);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定的延迟后开始进行重复的固定速率执行任务</span></span><br><span class="line">scheduleAtFixedRate(TimerTask task,<span class="type">long</span> delay,<span class="type">long</span> period);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终止此计时器，丢弃所有当前已安排的任务。</span></span><br><span class="line">cancal()；</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从此计时器的任务队列中移除所有已取消的任务。</span></span><br><span class="line">purge()；</span><br></pre></td></tr></table></figure></li><li><strong>Quartz</strong><br>使用Quartz可以开发一个或者多个定时任务，每个定时任务可以单独指定执行的时间，例如每隔1小时执行一次、每个月第一天上午10点执行一次、每个月最后一天下午5点执行一次等。<br>Quartz通常有三部分组成：调度器、任务、触发器.<br>定义执行任务Job，构建触发器Trigger，使用调度器绑定触发器和任务；<br>代码示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、创建调度器Scheduler</span></span><br><span class="line">        <span class="type">SchedulerFactory</span> <span class="variable">schedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">// 2、创建JobDetail实例，并与PrintJob类绑定(Job执行内容)</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(PrintJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;group&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 3、构建Trigger实例，每隔1s执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;trigger&quot;</span>, <span class="string">&quot;triggerGroup&quot;</span>)</span><br><span class="line">                .startNow()<span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">1</span>)<span class="comment">//每隔1s执行一次</span></span><br><span class="line">                        .repeatForever()).build();<span class="comment">//一直执行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、Scheduler绑定Job和Trigger，并执行</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------scheduler start ! ------------&quot;</span>);</span><br><span class="line">        scheduler.start();</span><br></pre></td></tr></table></figure></li><li><strong>Spring Task</strong><br>spring自带的一套定时任务工具，支持注解和配置文件两种形式。需要在启动类上加一个@EnableScheduling来开启定时任务。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;0 0 3 * * ?&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job1</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;通过cron定义的定时任务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scheduled(fixedDelay = 1000L)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job2</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;通过fixedDelay定义的定时任务&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github托管</title>
      <link href="/2023/08/29/github-tuo-guan/"/>
      <url>/2023/08/29/github-tuo-guan/</url>
      
        <content type="html"><![CDATA[<ul><li>hexo clean</li><li>hexo generate  生成静态文件</li><li>hexo deploy</li></ul><p>可以通过github中的Custom domain来修改域名</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于httpClient的httpGet和HttpPost</title>
      <link href="/2023/07/28/guan-yu-httpclient-de-httpget-he-httppost/"/>
      <url>/2023/07/28/guan-yu-httpclient-de-httpget-he-httppost/</url>
      
        <content type="html"><![CDATA[<p>无论是使用HttpGet，还是使用HttpPost，都必须通过如下3步来访问HTTP资源。</p><p>1.创建HttpGet或HttpPost对象，将要请求的URL通过构造方法传入HttpGet或HttpPost对象。</p><p>2.使用DefaultHttpClient类的execute方法发送HTTP GET或HTTP POST请求，并返回HttpResponse对象。</p><p>3.通过HttpResponse接口的getEntity方法返回响应信息，并进行相应的处理</p>]]></content>
      
      
      
        <tags>
            
            <tag> test测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
